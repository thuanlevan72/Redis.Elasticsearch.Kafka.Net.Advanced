version: "3.8"

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: todoapp-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tododb
      - POSTGRES_INITDB_ARGS=--wal-level=logical
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - todoapp-network

  # Debezium (Kafka Connect with PostgreSQL Connector)
  kafka-connect:
    image: debezium/connect:2.3
    container_name: todoapp-kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://localhost:8083/connectors || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Elasticsearch Node 1
  elasticsearch-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: todoapp-elasticsearch-1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - cluster.name=todoapp-cluster
      - node.name=elasticsearch-1
      - discovery.seed_hosts=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data-1:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Elasticsearch Node 2
  elasticsearch-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: todoapp-elasticsearch-2
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      - cluster.name=todoapp-cluster
      - node.name=elasticsearch-2
      - discovery.seed_hosts=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data-2:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Elasticsearch Node 3
  elasticsearch-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: todoapp-elasticsearch-3
    ports:
      - "9202:9200"
      - "9302:9300"
    environment:
      - cluster.name=todoapp-cluster
      - node.name=elasticsearch-3
      - discovery.seed_hosts=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data-3:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: todoapp-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch-1
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - todoapp-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: todoapp-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - todoapp-network

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: todoapp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: todoapp-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=todoapp-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - todoapp-network

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: todoapp-kibana
    depends_on:
      - elasticsearch-1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-1:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://localhost:5601/api/status || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

  # Todo Write API (commented out)
  # todoapp-write-api:
  #   build:
  #     context: .
  #     dockerfile: src/TodoApp.WriteApi/Dockerfile
  #   container_name: todoapp-write-api
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - elasticsearch-1
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:8000
  #     - PostgreSQL__Host=postgres
  #     - PostgreSQL__Port=5432
  #     - PostgreSQL__Database=tododb
  #     - PostgreSQL__Username=postgres
  #     - PostgreSQL__Password=postgres
  #     - KafkaSettings__BootstrapServers=kafka:29092
  #     - KafkaSettings__TodoEventsTopic=todo-events
  #     - ElasticsearchSettings__Url=http://elasticsearch-1:9200
  #   networks:
  #     - todoapp-network

  # Todo Read API (commented out)
  # todoapp-read-api:
  #   build:
  #     context: .
  #     dockerfile: src/TodoApp.ReadApi/Dockerfile
  #   container_name: todoapp-read-api
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - elasticsearch-1
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:5000
  #     - PostgreSQL__Host=postgres
  #     - PostgreSQL__Port=5432
  #     - PostgreSQL__Database=tododb
  #     - PostgreSQL__Username=postgres
  #     - PostgreSQL__Password=postgres
  #     - KafkaSettings__BootstrapServers=kafka:29092
  #     - KafkaSettings__TodoEventsTopic=todo-events
  #     - ElasticsearchSettings__Url=http://elasticsearch-1:9200
  #   networks:
  #     - todoapp-network

volumes:
  postgres-data:
  elasticsearch-data-1:
  elasticsearch-data-2:
  elasticsearch-data-3:

networks:
  todoapp-network:
    driver: bridge
